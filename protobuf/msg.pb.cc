// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mxw {

namespace {

const ::google::protobuf::Descriptor* login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_reflection_ = NULL;
const ::google::protobuf::Descriptor* loginVisitor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  loginVisitor_reflection_ = NULL;
const ::google::protobuf::Descriptor* relogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  relogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* loginRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  loginRet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* loginRet_ELoginErr_descriptor_ = NULL;
const ::google::protobuf::Descriptor* createRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  createRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* createRoleRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  createRoleRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* playerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  playerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* playerList_player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  playerList_player_reflection_ = NULL;
const ::google::protobuf::Descriptor* selectPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  selectPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* playerBaseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  playerBaseData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* s2c_PROTOCOL_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* c2s_PROTOCOL_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EClient_OS_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_2eproto() {
  protobuf_AddDesc_msg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg.proto");
  GOOGLE_CHECK(file != NULL);
  login_descriptor_ = file->message_type(0);
  static const int login_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login, uiaccountcrc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login, szimei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login, eclientostype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login, uiserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login, uiversion_),
  };
  login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      login_descriptor_,
      login::default_instance_,
      login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(login));
  loginVisitor_descriptor_ = file->message_type(1);
  static const int loginVisitor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginVisitor, szimei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginVisitor, eclientostype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginVisitor, uiserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginVisitor, uiversion_),
  };
  loginVisitor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      loginVisitor_descriptor_,
      loginVisitor::default_instance_,
      loginVisitor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginVisitor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginVisitor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(loginVisitor));
  relogin_descriptor_ = file->message_type(2);
  static const int relogin_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relogin, uiaccountcrc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relogin, szimei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relogin, eclientostype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relogin, uiserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relogin, uiversion_),
  };
  relogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      relogin_descriptor_,
      relogin::default_instance_,
      relogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(relogin));
  loginRet_descriptor_ = file->message_type(3);
  static const int loginRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginRet, ncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginRet, ntoken_),
  };
  loginRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      loginRet_descriptor_,
      loginRet::default_instance_,
      loginRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(loginRet));
  loginRet_ELoginErr_descriptor_ = loginRet_descriptor_->enum_type(0);
  createRole_descriptor_ = file->message_type(4);
  static const int createRole_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(createRole, szplayername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(createRole, nsex_),
  };
  createRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      createRole_descriptor_,
      createRole::default_instance_,
      createRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(createRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(createRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(createRole));
  createRoleRet_descriptor_ = file->message_type(5);
  static const int createRoleRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(createRoleRet, ncode_),
  };
  createRoleRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      createRoleRet_descriptor_,
      createRoleRet::default_instance_,
      createRoleRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(createRoleRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(createRoleRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(createRoleRet));
  playerList_descriptor_ = file->message_type(6);
  static const int playerList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerList, ncount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerList, players_),
  };
  playerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      playerList_descriptor_,
      playerList::default_instance_,
      playerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(playerList));
  playerList_player_descriptor_ = playerList_descriptor_->nested_type(0);
  static const int playerList_player_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerList_player, szname_),
  };
  playerList_player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      playerList_player_descriptor_,
      playerList_player::default_instance_,
      playerList_player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerList_player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerList_player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(playerList_player));
  selectPlayer_descriptor_ = file->message_type(7);
  static const int selectPlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(selectPlayer, szname_),
  };
  selectPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      selectPlayer_descriptor_,
      selectPlayer::default_instance_,
      selectPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(selectPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(selectPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(selectPlayer));
  playerBaseData_descriptor_ = file->message_type(8);
  static const int playerBaseData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerBaseData, nidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerBaseData, szname_),
  };
  playerBaseData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      playerBaseData_descriptor_,
      playerBaseData::default_instance_,
      playerBaseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerBaseData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerBaseData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(playerBaseData));
  s2c_PROTOCOL_descriptor_ = file->enum_type(0);
  c2s_PROTOCOL_descriptor_ = file->enum_type(1);
  EClient_OS_Type_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    login_descriptor_, &login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    loginVisitor_descriptor_, &loginVisitor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    relogin_descriptor_, &relogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    loginRet_descriptor_, &loginRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    createRole_descriptor_, &createRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    createRoleRet_descriptor_, &createRoleRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    playerList_descriptor_, &playerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    playerList_player_descriptor_, &playerList_player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    selectPlayer_descriptor_, &selectPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    playerBaseData_descriptor_, &playerBaseData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_2eproto() {
  delete login::default_instance_;
  delete login_reflection_;
  delete loginVisitor::default_instance_;
  delete loginVisitor_reflection_;
  delete relogin::default_instance_;
  delete relogin_reflection_;
  delete loginRet::default_instance_;
  delete loginRet_reflection_;
  delete createRole::default_instance_;
  delete createRole_reflection_;
  delete createRoleRet::default_instance_;
  delete createRoleRet_reflection_;
  delete playerList::default_instance_;
  delete playerList_reflection_;
  delete playerList_player::default_instance_;
  delete playerList_player_reflection_;
  delete selectPlayer::default_instance_;
  delete selectPlayer_reflection_;
  delete playerBaseData::default_instance_;
  delete playerBaseData_reflection_;
}

void protobuf_AddDesc_msg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmsg.proto\022\003mxw\"\201\001\n\005login\022\024\n\014uiAccountC"
    "RC\030\001 \002(\r\022\016\n\006szIMEI\030\002 \001(\t\022+\n\reClientOSTyp"
    "e\030\003 \002(\0162\024.mxw.EClient_OS_Type\022\022\n\nuiServe"
    "rID\030\004 \002(\r\022\021\n\tuiVersion\030\005 \002(\r\"|\n\014loginVis"
    "itor\022\016\n\006szIMEI\030\001 \002(\t\0225\n\reClientOSType\030\002 "
    "\002(\0162\024.mxw.EClient_OS_Type:\010ECOT_IOS\022\022\n\nu"
    "iServerID\030\003 \002(\r\022\021\n\tuiVersion\030\004 \002(\r\"\203\001\n\007r"
    "elogin\022\024\n\014uiAccountCRC\030\001 \002(\005\022\016\n\006szIMEI\030\002"
    " \001(\t\022+\n\reClientOSType\030\003 \002(\0162\024.mxw.EClien"
    "t_OS_Type\022\022\n\nuiServerID\030\004 \002(\r\022\021\n\tuiVersi"
    "on\030\005 \002(\r\"\204\001\n\010loginRet\022&\n\005nCode\030\001 \002(\0162\027.m"
    "xw.loginRet.ELoginErr\022\016\n\006nToken\030\002 \002(\005\"@\n"
    "\tELoginErr\022\017\n\013ELE_Success\020\001\022\016\n\nELE_Faile"
    "d\020\002\022\022\n\016ELE_CreateRole\020\003\"0\n\ncreateRole\022\024\n"
    "\014szPlayerName\030\001 \002(\t\022\014\n\004nSex\030\002 \002(\005\"\036\n\rcre"
    "ateRoleRet\022\r\n\005nCode\030\001 \002(\005\"_\n\nplayerList\022"
    "\016\n\006nCount\030\001 \002(\005\022\'\n\007players\030\002 \003(\0132\026.mxw.p"
    "layerList.player\032\030\n\006player\022\016\n\006szName\030\002 \002"
    "(\t\"\036\n\014selectPlayer\022\016\n\006szName\030\001 \002(\t\".\n\016pl"
    "ayerBaseData\022\014\n\004nIdx\030\001 \002(\005\022\016\n\006szName\030\002 \002"
    "(\t*\226\001\n\014s2c_PROTOCOL\022\r\n\ts2c_begin\020\000\022\020\n\014s2"
    "c_loginRet\020\001\022\022\n\016s2c_playerList\020\002\022\027\n\023s2c_"
    "createPlayerRet\020\003\022\026\n\022s2c_playerBaseData\020"
    "\004\022\022\n\016s2c_serverInfo\020\005\022\014\n\007s2c_end\020\377\001*x\n\014c"
    "2s_PROTOCOL\022\r\n\tc2s_begin\020\000\022\r\n\tc2s_login\020"
    "\001\022\025\n\021c2s_login_visitor\020\002\022\017\n\013c2s_relogin\020"
    "\003\022\024\n\020c2s_createPlayer\020\004\022\014\n\007c2s_end\020\377\001*1\n"
    "\017EClient_OS_Type\022\014\n\010ECOT_IOS\020\000\022\020\n\014ECOT_A"
    "NDROID\020\001", 1128);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg.proto", &protobuf_RegisterTypes);
  login::default_instance_ = new login();
  loginVisitor::default_instance_ = new loginVisitor();
  relogin::default_instance_ = new relogin();
  loginRet::default_instance_ = new loginRet();
  createRole::default_instance_ = new createRole();
  createRoleRet::default_instance_ = new createRoleRet();
  playerList::default_instance_ = new playerList();
  playerList_player::default_instance_ = new playerList_player();
  selectPlayer::default_instance_ = new selectPlayer();
  playerBaseData::default_instance_ = new playerBaseData();
  login::default_instance_->InitAsDefaultInstance();
  loginVisitor::default_instance_->InitAsDefaultInstance();
  relogin::default_instance_->InitAsDefaultInstance();
  loginRet::default_instance_->InitAsDefaultInstance();
  createRole::default_instance_->InitAsDefaultInstance();
  createRoleRet::default_instance_->InitAsDefaultInstance();
  playerList::default_instance_->InitAsDefaultInstance();
  playerList_player::default_instance_->InitAsDefaultInstance();
  selectPlayer::default_instance_->InitAsDefaultInstance();
  playerBaseData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_2eproto {
  StaticDescriptorInitializer_msg_2eproto() {
    protobuf_AddDesc_msg_2eproto();
  }
} static_descriptor_initializer_msg_2eproto_;
const ::google::protobuf::EnumDescriptor* s2c_PROTOCOL_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s2c_PROTOCOL_descriptor_;
}
bool s2c_PROTOCOL_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 255:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* c2s_PROTOCOL_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c2s_PROTOCOL_descriptor_;
}
bool c2s_PROTOCOL_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 255:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EClient_OS_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EClient_OS_Type_descriptor_;
}
bool EClient_OS_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int login::kUiAccountCRCFieldNumber;
const int login::kSzIMEIFieldNumber;
const int login::kEClientOSTypeFieldNumber;
const int login::kUiServerIDFieldNumber;
const int login::kUiVersionFieldNumber;
#endif  // !_MSC_VER

login::login()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mxw.login)
}

void login::InitAsDefaultInstance() {
}

login::login(const login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mxw.login)
}

void login::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uiaccountcrc_ = 0u;
  szimei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eclientostype_ = 0;
  uiserverid_ = 0u;
  uiversion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

login::~login() {
  // @@protoc_insertion_point(destructor:mxw.login)
  SharedDtor();
}

void login::SharedDtor() {
  if (szimei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szimei_;
  }
  if (this != default_instance_) {
  }
}

void login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_descriptor_;
}

const login& login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

login* login::default_instance_ = NULL;

login* login::New() const {
  return new login;
}

void login::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<login*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uiaccountcrc_, uiversion_);
    if (has_szimei()) {
      if (szimei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szimei_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mxw.login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiAccountCRC = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiaccountcrc_)));
          set_has_uiaccountcrc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_szIMEI;
        break;
      }

      // optional string szIMEI = 2;
      case 2: {
        if (tag == 18) {
         parse_szIMEI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szimei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->szimei().data(), this->szimei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "szimei");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_eClientOSType;
        break;
      }

      // required .mxw.EClient_OS_Type eClientOSType = 3;
      case 3: {
        if (tag == 24) {
         parse_eClientOSType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mxw::EClient_OS_Type_IsValid(value)) {
            set_eclientostype(static_cast< ::mxw::EClient_OS_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uiServerID;
        break;
      }

      // required uint32 uiServerID = 4;
      case 4: {
        if (tag == 32) {
         parse_uiServerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiserverid_)));
          set_has_uiserverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_uiVersion;
        break;
      }

      // required uint32 uiVersion = 5;
      case 5: {
        if (tag == 40) {
         parse_uiVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiversion_)));
          set_has_uiversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mxw.login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mxw.login)
  return false;
#undef DO_
}

void login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mxw.login)
  // required uint32 uiAccountCRC = 1;
  if (has_uiaccountcrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiaccountcrc(), output);
  }

  // optional string szIMEI = 2;
  if (has_szimei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szimei().data(), this->szimei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "szimei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szimei(), output);
  }

  // required .mxw.EClient_OS_Type eClientOSType = 3;
  if (has_eclientostype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->eclientostype(), output);
  }

  // required uint32 uiServerID = 4;
  if (has_uiserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uiserverid(), output);
  }

  // required uint32 uiVersion = 5;
  if (has_uiversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uiversion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mxw.login)
}

::google::protobuf::uint8* login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mxw.login)
  // required uint32 uiAccountCRC = 1;
  if (has_uiaccountcrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiaccountcrc(), target);
  }

  // optional string szIMEI = 2;
  if (has_szimei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szimei().data(), this->szimei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "szimei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szimei(), target);
  }

  // required .mxw.EClient_OS_Type eClientOSType = 3;
  if (has_eclientostype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->eclientostype(), target);
  }

  // required uint32 uiServerID = 4;
  if (has_uiserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uiserverid(), target);
  }

  // required uint32 uiVersion = 5;
  if (has_uiversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uiversion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mxw.login)
  return target;
}

int login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiAccountCRC = 1;
    if (has_uiaccountcrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiaccountcrc());
    }

    // optional string szIMEI = 2;
    if (has_szimei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szimei());
    }

    // required .mxw.EClient_OS_Type eClientOSType = 3;
    if (has_eclientostype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eclientostype());
    }

    // required uint32 uiServerID = 4;
    if (has_uiserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiserverid());
    }

    // required uint32 uiVersion = 5;
    if (has_uiversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiversion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login::MergeFrom(const login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiaccountcrc()) {
      set_uiaccountcrc(from.uiaccountcrc());
    }
    if (from.has_szimei()) {
      set_szimei(from.szimei());
    }
    if (from.has_eclientostype()) {
      set_eclientostype(from.eclientostype());
    }
    if (from.has_uiserverid()) {
      set_uiserverid(from.uiserverid());
    }
    if (from.has_uiversion()) {
      set_uiversion(from.uiversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login::CopyFrom(const login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  return true;
}

void login::Swap(login* other) {
  if (other != this) {
    std::swap(uiaccountcrc_, other->uiaccountcrc_);
    std::swap(szimei_, other->szimei_);
    std::swap(eclientostype_, other->eclientostype_);
    std::swap(uiserverid_, other->uiserverid_);
    std::swap(uiversion_, other->uiversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_descriptor_;
  metadata.reflection = login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int loginVisitor::kSzIMEIFieldNumber;
const int loginVisitor::kEClientOSTypeFieldNumber;
const int loginVisitor::kUiServerIDFieldNumber;
const int loginVisitor::kUiVersionFieldNumber;
#endif  // !_MSC_VER

loginVisitor::loginVisitor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mxw.loginVisitor)
}

void loginVisitor::InitAsDefaultInstance() {
}

loginVisitor::loginVisitor(const loginVisitor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mxw.loginVisitor)
}

void loginVisitor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  szimei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eclientostype_ = 0;
  uiserverid_ = 0u;
  uiversion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

loginVisitor::~loginVisitor() {
  // @@protoc_insertion_point(destructor:mxw.loginVisitor)
  SharedDtor();
}

void loginVisitor::SharedDtor() {
  if (szimei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szimei_;
  }
  if (this != default_instance_) {
  }
}

void loginVisitor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* loginVisitor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return loginVisitor_descriptor_;
}

const loginVisitor& loginVisitor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

loginVisitor* loginVisitor::default_instance_ = NULL;

loginVisitor* loginVisitor::New() const {
  return new loginVisitor;
}

void loginVisitor::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<loginVisitor*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(eclientostype_, uiversion_);
    if (has_szimei()) {
      if (szimei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szimei_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool loginVisitor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mxw.loginVisitor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string szIMEI = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szimei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->szimei().data(), this->szimei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "szimei");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_eClientOSType;
        break;
      }

      // required .mxw.EClient_OS_Type eClientOSType = 2 [default = ECOT_IOS];
      case 2: {
        if (tag == 16) {
         parse_eClientOSType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mxw::EClient_OS_Type_IsValid(value)) {
            set_eclientostype(static_cast< ::mxw::EClient_OS_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uiServerID;
        break;
      }

      // required uint32 uiServerID = 3;
      case 3: {
        if (tag == 24) {
         parse_uiServerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiserverid_)));
          set_has_uiserverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uiVersion;
        break;
      }

      // required uint32 uiVersion = 4;
      case 4: {
        if (tag == 32) {
         parse_uiVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiversion_)));
          set_has_uiversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mxw.loginVisitor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mxw.loginVisitor)
  return false;
#undef DO_
}

void loginVisitor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mxw.loginVisitor)
  // required string szIMEI = 1;
  if (has_szimei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szimei().data(), this->szimei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "szimei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->szimei(), output);
  }

  // required .mxw.EClient_OS_Type eClientOSType = 2 [default = ECOT_IOS];
  if (has_eclientostype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->eclientostype(), output);
  }

  // required uint32 uiServerID = 3;
  if (has_uiserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uiserverid(), output);
  }

  // required uint32 uiVersion = 4;
  if (has_uiversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uiversion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mxw.loginVisitor)
}

::google::protobuf::uint8* loginVisitor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mxw.loginVisitor)
  // required string szIMEI = 1;
  if (has_szimei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szimei().data(), this->szimei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "szimei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->szimei(), target);
  }

  // required .mxw.EClient_OS_Type eClientOSType = 2 [default = ECOT_IOS];
  if (has_eclientostype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->eclientostype(), target);
  }

  // required uint32 uiServerID = 3;
  if (has_uiserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uiserverid(), target);
  }

  // required uint32 uiVersion = 4;
  if (has_uiversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uiversion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mxw.loginVisitor)
  return target;
}

int loginVisitor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string szIMEI = 1;
    if (has_szimei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szimei());
    }

    // required .mxw.EClient_OS_Type eClientOSType = 2 [default = ECOT_IOS];
    if (has_eclientostype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eclientostype());
    }

    // required uint32 uiServerID = 3;
    if (has_uiserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiserverid());
    }

    // required uint32 uiVersion = 4;
    if (has_uiversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiversion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void loginVisitor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const loginVisitor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const loginVisitor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void loginVisitor::MergeFrom(const loginVisitor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_szimei()) {
      set_szimei(from.szimei());
    }
    if (from.has_eclientostype()) {
      set_eclientostype(from.eclientostype());
    }
    if (from.has_uiserverid()) {
      set_uiserverid(from.uiserverid());
    }
    if (from.has_uiversion()) {
      set_uiversion(from.uiversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void loginVisitor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void loginVisitor::CopyFrom(const loginVisitor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool loginVisitor::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void loginVisitor::Swap(loginVisitor* other) {
  if (other != this) {
    std::swap(szimei_, other->szimei_);
    std::swap(eclientostype_, other->eclientostype_);
    std::swap(uiserverid_, other->uiserverid_);
    std::swap(uiversion_, other->uiversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata loginVisitor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = loginVisitor_descriptor_;
  metadata.reflection = loginVisitor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int relogin::kUiAccountCRCFieldNumber;
const int relogin::kSzIMEIFieldNumber;
const int relogin::kEClientOSTypeFieldNumber;
const int relogin::kUiServerIDFieldNumber;
const int relogin::kUiVersionFieldNumber;
#endif  // !_MSC_VER

relogin::relogin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mxw.relogin)
}

void relogin::InitAsDefaultInstance() {
}

relogin::relogin(const relogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mxw.relogin)
}

void relogin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uiaccountcrc_ = 0;
  szimei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eclientostype_ = 0;
  uiserverid_ = 0u;
  uiversion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

relogin::~relogin() {
  // @@protoc_insertion_point(destructor:mxw.relogin)
  SharedDtor();
}

void relogin::SharedDtor() {
  if (szimei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szimei_;
  }
  if (this != default_instance_) {
  }
}

void relogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* relogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return relogin_descriptor_;
}

const relogin& relogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

relogin* relogin::default_instance_ = NULL;

relogin* relogin::New() const {
  return new relogin;
}

void relogin::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<relogin*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uiaccountcrc_, uiversion_);
    if (has_szimei()) {
      if (szimei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szimei_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool relogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mxw.relogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uiAccountCRC = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uiaccountcrc_)));
          set_has_uiaccountcrc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_szIMEI;
        break;
      }

      // optional string szIMEI = 2;
      case 2: {
        if (tag == 18) {
         parse_szIMEI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szimei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->szimei().data(), this->szimei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "szimei");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_eClientOSType;
        break;
      }

      // required .mxw.EClient_OS_Type eClientOSType = 3;
      case 3: {
        if (tag == 24) {
         parse_eClientOSType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mxw::EClient_OS_Type_IsValid(value)) {
            set_eclientostype(static_cast< ::mxw::EClient_OS_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uiServerID;
        break;
      }

      // required uint32 uiServerID = 4;
      case 4: {
        if (tag == 32) {
         parse_uiServerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiserverid_)));
          set_has_uiserverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_uiVersion;
        break;
      }

      // required uint32 uiVersion = 5;
      case 5: {
        if (tag == 40) {
         parse_uiVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiversion_)));
          set_has_uiversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mxw.relogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mxw.relogin)
  return false;
#undef DO_
}

void relogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mxw.relogin)
  // required int32 uiAccountCRC = 1;
  if (has_uiaccountcrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uiaccountcrc(), output);
  }

  // optional string szIMEI = 2;
  if (has_szimei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szimei().data(), this->szimei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "szimei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szimei(), output);
  }

  // required .mxw.EClient_OS_Type eClientOSType = 3;
  if (has_eclientostype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->eclientostype(), output);
  }

  // required uint32 uiServerID = 4;
  if (has_uiserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uiserverid(), output);
  }

  // required uint32 uiVersion = 5;
  if (has_uiversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uiversion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mxw.relogin)
}

::google::protobuf::uint8* relogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mxw.relogin)
  // required int32 uiAccountCRC = 1;
  if (has_uiaccountcrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uiaccountcrc(), target);
  }

  // optional string szIMEI = 2;
  if (has_szimei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szimei().data(), this->szimei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "szimei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szimei(), target);
  }

  // required .mxw.EClient_OS_Type eClientOSType = 3;
  if (has_eclientostype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->eclientostype(), target);
  }

  // required uint32 uiServerID = 4;
  if (has_uiserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uiserverid(), target);
  }

  // required uint32 uiVersion = 5;
  if (has_uiversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uiversion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mxw.relogin)
  return target;
}

int relogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uiAccountCRC = 1;
    if (has_uiaccountcrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uiaccountcrc());
    }

    // optional string szIMEI = 2;
    if (has_szimei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szimei());
    }

    // required .mxw.EClient_OS_Type eClientOSType = 3;
    if (has_eclientostype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eclientostype());
    }

    // required uint32 uiServerID = 4;
    if (has_uiserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiserverid());
    }

    // required uint32 uiVersion = 5;
    if (has_uiversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiversion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void relogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const relogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const relogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void relogin::MergeFrom(const relogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiaccountcrc()) {
      set_uiaccountcrc(from.uiaccountcrc());
    }
    if (from.has_szimei()) {
      set_szimei(from.szimei());
    }
    if (from.has_eclientostype()) {
      set_eclientostype(from.eclientostype());
    }
    if (from.has_uiserverid()) {
      set_uiserverid(from.uiserverid());
    }
    if (from.has_uiversion()) {
      set_uiversion(from.uiversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void relogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void relogin::CopyFrom(const relogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool relogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  return true;
}

void relogin::Swap(relogin* other) {
  if (other != this) {
    std::swap(uiaccountcrc_, other->uiaccountcrc_);
    std::swap(szimei_, other->szimei_);
    std::swap(eclientostype_, other->eclientostype_);
    std::swap(uiserverid_, other->uiserverid_);
    std::swap(uiversion_, other->uiversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata relogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = relogin_descriptor_;
  metadata.reflection = relogin_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* loginRet_ELoginErr_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return loginRet_ELoginErr_descriptor_;
}
bool loginRet_ELoginErr_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const loginRet_ELoginErr loginRet::ELE_Success;
const loginRet_ELoginErr loginRet::ELE_Failed;
const loginRet_ELoginErr loginRet::ELE_CreateRole;
const loginRet_ELoginErr loginRet::ELoginErr_MIN;
const loginRet_ELoginErr loginRet::ELoginErr_MAX;
const int loginRet::ELoginErr_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int loginRet::kNCodeFieldNumber;
const int loginRet::kNTokenFieldNumber;
#endif  // !_MSC_VER

loginRet::loginRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mxw.loginRet)
}

void loginRet::InitAsDefaultInstance() {
}

loginRet::loginRet(const loginRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mxw.loginRet)
}

void loginRet::SharedCtor() {
  _cached_size_ = 0;
  ncode_ = 1;
  ntoken_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

loginRet::~loginRet() {
  // @@protoc_insertion_point(destructor:mxw.loginRet)
  SharedDtor();
}

void loginRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void loginRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* loginRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return loginRet_descriptor_;
}

const loginRet& loginRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

loginRet* loginRet::default_instance_ = NULL;

loginRet* loginRet::New() const {
  return new loginRet;
}

void loginRet::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    ncode_ = 1;
    ntoken_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool loginRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mxw.loginRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mxw.loginRet.ELoginErr nCode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mxw::loginRet_ELoginErr_IsValid(value)) {
            set_ncode(static_cast< ::mxw::loginRet_ELoginErr >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nToken;
        break;
      }

      // required int32 nToken = 2;
      case 2: {
        if (tag == 16) {
         parse_nToken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntoken_)));
          set_has_ntoken();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mxw.loginRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mxw.loginRet)
  return false;
#undef DO_
}

void loginRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mxw.loginRet)
  // required .mxw.loginRet.ELoginErr nCode = 1;
  if (has_ncode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ncode(), output);
  }

  // required int32 nToken = 2;
  if (has_ntoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ntoken(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mxw.loginRet)
}

::google::protobuf::uint8* loginRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mxw.loginRet)
  // required .mxw.loginRet.ELoginErr nCode = 1;
  if (has_ncode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ncode(), target);
  }

  // required int32 nToken = 2;
  if (has_ntoken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ntoken(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mxw.loginRet)
  return target;
}

int loginRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mxw.loginRet.ELoginErr nCode = 1;
    if (has_ncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ncode());
    }

    // required int32 nToken = 2;
    if (has_ntoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntoken());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void loginRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const loginRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const loginRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void loginRet::MergeFrom(const loginRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ncode()) {
      set_ncode(from.ncode());
    }
    if (from.has_ntoken()) {
      set_ntoken(from.ntoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void loginRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void loginRet::CopyFrom(const loginRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool loginRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void loginRet::Swap(loginRet* other) {
  if (other != this) {
    std::swap(ncode_, other->ncode_);
    std::swap(ntoken_, other->ntoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata loginRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = loginRet_descriptor_;
  metadata.reflection = loginRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int createRole::kSzPlayerNameFieldNumber;
const int createRole::kNSexFieldNumber;
#endif  // !_MSC_VER

createRole::createRole()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mxw.createRole)
}

void createRole::InitAsDefaultInstance() {
}

createRole::createRole(const createRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mxw.createRole)
}

void createRole::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  szplayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nsex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

createRole::~createRole() {
  // @@protoc_insertion_point(destructor:mxw.createRole)
  SharedDtor();
}

void createRole::SharedDtor() {
  if (szplayername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szplayername_;
  }
  if (this != default_instance_) {
  }
}

void createRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* createRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return createRole_descriptor_;
}

const createRole& createRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

createRole* createRole::default_instance_ = NULL;

createRole* createRole::New() const {
  return new createRole;
}

void createRole::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_szplayername()) {
      if (szplayername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szplayername_->clear();
      }
    }
    nsex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool createRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mxw.createRole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string szPlayerName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szplayername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->szplayername().data(), this->szplayername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "szplayername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nSex;
        break;
      }

      // required int32 nSex = 2;
      case 2: {
        if (tag == 16) {
         parse_nSex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsex_)));
          set_has_nsex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mxw.createRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mxw.createRole)
  return false;
#undef DO_
}

void createRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mxw.createRole)
  // required string szPlayerName = 1;
  if (has_szplayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szplayername().data(), this->szplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "szplayername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->szplayername(), output);
  }

  // required int32 nSex = 2;
  if (has_nsex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nsex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mxw.createRole)
}

::google::protobuf::uint8* createRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mxw.createRole)
  // required string szPlayerName = 1;
  if (has_szplayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szplayername().data(), this->szplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "szplayername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->szplayername(), target);
  }

  // required int32 nSex = 2;
  if (has_nsex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nsex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mxw.createRole)
  return target;
}

int createRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string szPlayerName = 1;
    if (has_szplayername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szplayername());
    }

    // required int32 nSex = 2;
    if (has_nsex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void createRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const createRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const createRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void createRole::MergeFrom(const createRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_szplayername()) {
      set_szplayername(from.szplayername());
    }
    if (from.has_nsex()) {
      set_nsex(from.nsex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void createRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void createRole::CopyFrom(const createRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool createRole::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void createRole::Swap(createRole* other) {
  if (other != this) {
    std::swap(szplayername_, other->szplayername_);
    std::swap(nsex_, other->nsex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata createRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = createRole_descriptor_;
  metadata.reflection = createRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int createRoleRet::kNCodeFieldNumber;
#endif  // !_MSC_VER

createRoleRet::createRoleRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mxw.createRoleRet)
}

void createRoleRet::InitAsDefaultInstance() {
}

createRoleRet::createRoleRet(const createRoleRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mxw.createRoleRet)
}

void createRoleRet::SharedCtor() {
  _cached_size_ = 0;
  ncode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

createRoleRet::~createRoleRet() {
  // @@protoc_insertion_point(destructor:mxw.createRoleRet)
  SharedDtor();
}

void createRoleRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void createRoleRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* createRoleRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return createRoleRet_descriptor_;
}

const createRoleRet& createRoleRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

createRoleRet* createRoleRet::default_instance_ = NULL;

createRoleRet* createRoleRet::New() const {
  return new createRoleRet;
}

void createRoleRet::Clear() {
  ncode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool createRoleRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mxw.createRoleRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncode_)));
          set_has_ncode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mxw.createRoleRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mxw.createRoleRet)
  return false;
#undef DO_
}

void createRoleRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mxw.createRoleRet)
  // required int32 nCode = 1;
  if (has_ncode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ncode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mxw.createRoleRet)
}

::google::protobuf::uint8* createRoleRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mxw.createRoleRet)
  // required int32 nCode = 1;
  if (has_ncode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ncode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mxw.createRoleRet)
  return target;
}

int createRoleRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nCode = 1;
    if (has_ncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void createRoleRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const createRoleRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const createRoleRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void createRoleRet::MergeFrom(const createRoleRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ncode()) {
      set_ncode(from.ncode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void createRoleRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void createRoleRet::CopyFrom(const createRoleRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool createRoleRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void createRoleRet::Swap(createRoleRet* other) {
  if (other != this) {
    std::swap(ncode_, other->ncode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata createRoleRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = createRoleRet_descriptor_;
  metadata.reflection = createRoleRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int playerList_player::kSzNameFieldNumber;
#endif  // !_MSC_VER

playerList_player::playerList_player()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mxw.playerList.player)
}

void playerList_player::InitAsDefaultInstance() {
}

playerList_player::playerList_player(const playerList_player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mxw.playerList.player)
}

void playerList_player::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  szname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

playerList_player::~playerList_player() {
  // @@protoc_insertion_point(destructor:mxw.playerList.player)
  SharedDtor();
}

void playerList_player::SharedDtor() {
  if (szname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szname_;
  }
  if (this != default_instance_) {
  }
}

void playerList_player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* playerList_player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return playerList_player_descriptor_;
}

const playerList_player& playerList_player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

playerList_player* playerList_player::default_instance_ = NULL;

playerList_player* playerList_player::New() const {
  return new playerList_player;
}

void playerList_player::Clear() {
  if (has_szname()) {
    if (szname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      szname_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool playerList_player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mxw.playerList.player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string szName = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->szname().data(), this->szname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "szname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mxw.playerList.player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mxw.playerList.player)
  return false;
#undef DO_
}

void playerList_player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mxw.playerList.player)
  // required string szName = 2;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szname().data(), this->szname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "szname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mxw.playerList.player)
}

::google::protobuf::uint8* playerList_player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mxw.playerList.player)
  // required string szName = 2;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szname().data(), this->szname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "szname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mxw.playerList.player)
  return target;
}

int playerList_player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string szName = 2;
    if (has_szname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void playerList_player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const playerList_player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const playerList_player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void playerList_player::MergeFrom(const playerList_player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_szname()) {
      set_szname(from.szname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void playerList_player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void playerList_player::CopyFrom(const playerList_player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool playerList_player::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void playerList_player::Swap(playerList_player* other) {
  if (other != this) {
    std::swap(szname_, other->szname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata playerList_player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = playerList_player_descriptor_;
  metadata.reflection = playerList_player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int playerList::kNCountFieldNumber;
const int playerList::kPlayersFieldNumber;
#endif  // !_MSC_VER

playerList::playerList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mxw.playerList)
}

void playerList::InitAsDefaultInstance() {
}

playerList::playerList(const playerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mxw.playerList)
}

void playerList::SharedCtor() {
  _cached_size_ = 0;
  ncount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

playerList::~playerList() {
  // @@protoc_insertion_point(destructor:mxw.playerList)
  SharedDtor();
}

void playerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void playerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* playerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return playerList_descriptor_;
}

const playerList& playerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

playerList* playerList::default_instance_ = NULL;

playerList* playerList::New() const {
  return new playerList;
}

void playerList::Clear() {
  ncount_ = 0;
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool playerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mxw.playerList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nCount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncount_)));
          set_has_ncount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_players;
        break;
      }

      // repeated .mxw.playerList.player players = 2;
      case 2: {
        if (tag == 18) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_players;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mxw.playerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mxw.playerList)
  return false;
#undef DO_
}

void playerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mxw.playerList)
  // required int32 nCount = 1;
  if (has_ncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ncount(), output);
  }

  // repeated .mxw.playerList.player players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mxw.playerList)
}

::google::protobuf::uint8* playerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mxw.playerList)
  // required int32 nCount = 1;
  if (has_ncount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ncount(), target);
  }

  // repeated .mxw.playerList.player players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mxw.playerList)
  return target;
}

int playerList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nCount = 1;
    if (has_ncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncount());
    }

  }
  // repeated .mxw.playerList.player players = 2;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void playerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const playerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const playerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void playerList::MergeFrom(const playerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ncount()) {
      set_ncount(from.ncount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void playerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void playerList::CopyFrom(const playerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool playerList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->players())) return false;
  return true;
}

void playerList::Swap(playerList* other) {
  if (other != this) {
    std::swap(ncount_, other->ncount_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata playerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = playerList_descriptor_;
  metadata.reflection = playerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int selectPlayer::kSzNameFieldNumber;
#endif  // !_MSC_VER

selectPlayer::selectPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mxw.selectPlayer)
}

void selectPlayer::InitAsDefaultInstance() {
}

selectPlayer::selectPlayer(const selectPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mxw.selectPlayer)
}

void selectPlayer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  szname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

selectPlayer::~selectPlayer() {
  // @@protoc_insertion_point(destructor:mxw.selectPlayer)
  SharedDtor();
}

void selectPlayer::SharedDtor() {
  if (szname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szname_;
  }
  if (this != default_instance_) {
  }
}

void selectPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* selectPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return selectPlayer_descriptor_;
}

const selectPlayer& selectPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

selectPlayer* selectPlayer::default_instance_ = NULL;

selectPlayer* selectPlayer::New() const {
  return new selectPlayer;
}

void selectPlayer::Clear() {
  if (has_szname()) {
    if (szname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      szname_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool selectPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mxw.selectPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string szName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->szname().data(), this->szname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "szname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mxw.selectPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mxw.selectPlayer)
  return false;
#undef DO_
}

void selectPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mxw.selectPlayer)
  // required string szName = 1;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szname().data(), this->szname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "szname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->szname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mxw.selectPlayer)
}

::google::protobuf::uint8* selectPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mxw.selectPlayer)
  // required string szName = 1;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szname().data(), this->szname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "szname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->szname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mxw.selectPlayer)
  return target;
}

int selectPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string szName = 1;
    if (has_szname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void selectPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const selectPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const selectPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void selectPlayer::MergeFrom(const selectPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_szname()) {
      set_szname(from.szname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void selectPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void selectPlayer::CopyFrom(const selectPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool selectPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void selectPlayer::Swap(selectPlayer* other) {
  if (other != this) {
    std::swap(szname_, other->szname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata selectPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = selectPlayer_descriptor_;
  metadata.reflection = selectPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int playerBaseData::kNIdxFieldNumber;
const int playerBaseData::kSzNameFieldNumber;
#endif  // !_MSC_VER

playerBaseData::playerBaseData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mxw.playerBaseData)
}

void playerBaseData::InitAsDefaultInstance() {
}

playerBaseData::playerBaseData(const playerBaseData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mxw.playerBaseData)
}

void playerBaseData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nidx_ = 0;
  szname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

playerBaseData::~playerBaseData() {
  // @@protoc_insertion_point(destructor:mxw.playerBaseData)
  SharedDtor();
}

void playerBaseData::SharedDtor() {
  if (szname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szname_;
  }
  if (this != default_instance_) {
  }
}

void playerBaseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* playerBaseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return playerBaseData_descriptor_;
}

const playerBaseData& playerBaseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

playerBaseData* playerBaseData::default_instance_ = NULL;

playerBaseData* playerBaseData::New() const {
  return new playerBaseData;
}

void playerBaseData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    nidx_ = 0;
    if (has_szname()) {
      if (szname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool playerBaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mxw.playerBaseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nIdx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nidx_)));
          set_has_nidx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_szName;
        break;
      }

      // required string szName = 2;
      case 2: {
        if (tag == 18) {
         parse_szName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->szname().data(), this->szname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "szname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mxw.playerBaseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mxw.playerBaseData)
  return false;
#undef DO_
}

void playerBaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mxw.playerBaseData)
  // required int32 nIdx = 1;
  if (has_nidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nidx(), output);
  }

  // required string szName = 2;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szname().data(), this->szname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "szname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mxw.playerBaseData)
}

::google::protobuf::uint8* playerBaseData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mxw.playerBaseData)
  // required int32 nIdx = 1;
  if (has_nidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nidx(), target);
  }

  // required string szName = 2;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szname().data(), this->szname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "szname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mxw.playerBaseData)
  return target;
}

int playerBaseData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nIdx = 1;
    if (has_nidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nidx());
    }

    // required string szName = 2;
    if (has_szname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void playerBaseData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const playerBaseData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const playerBaseData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void playerBaseData::MergeFrom(const playerBaseData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nidx()) {
      set_nidx(from.nidx());
    }
    if (from.has_szname()) {
      set_szname(from.szname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void playerBaseData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void playerBaseData::CopyFrom(const playerBaseData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool playerBaseData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void playerBaseData::Swap(playerBaseData* other) {
  if (other != this) {
    std::swap(nidx_, other->nidx_);
    std::swap(szname_, other->szname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata playerBaseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = playerBaseData_descriptor_;
  metadata.reflection = playerBaseData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mxw

// @@protoc_insertion_point(global_scope)
